generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// enum UserRole {
//   customer
//   event_organizer
// }

enum TransactionStatus {
  waiting_for_payment
  waiting_for_admin
  confirmation
  done
  rejected
  expired
  canceled
}

enum RefferalStatus {
  pending
  completed
  expired
}

model Event {
  id          String    @id @default(uuid())
  name        String
  location    String
  start_date  DateTime
  end_date    DateTime
  seats       Int
  organizer   String
  price       Float
  description String
  created_at  DateTime  @default(now())
  reviews     Review[]
  vouchers    Voucher[]
}

model Voucher {
  id            String   @id @default(uuid())
  discount      Float
  name          String
  event_id      String
  expiry_date   DateTime
  code          String   @unique
  max_usage     Int
  current_usage Int
  event         Event    @relation(fields: [event_id], references: [id])
}

model Review {
  id         String   @id @default(uuid())
  user_id    Int
  event_id   String
  message    String
  rating     Int
  created_at DateTime @default(now())
  event      Event    @relation(fields: [event_id], references: [id])
  user       Users    @relation(fields: [user_id], references: [id])

  @@unique([user_id, event_id]) // Prevent duplicate reviews per user per event
}

model Coupon {
  id            String     @id @default(uuid())
  discount      Float
  name          String
  expiry_date   DateTime
  code          String     @unique
  max_usage     Int
  current_usage Int
  Referral      Referral[]
}

model Users {
  id              Int           @id @default(autoincrement())
  first_name      String
  last_name       String
  profile_picture String?
  password        String        @db.VarChar(255)
  email           String        @unique
  referral_code   String        @unique @db.VarChar(30) // Unique code for each user
  referred_by     String?       @db.VarChar(30) // Code used by the user to refer others
  user_points     Int           @default(0) // Default userpoint
  roleId          Int           @default(1) // Default role is customer
  is_verified     Boolean       @default(false)
  expiry_points   DateTime
  reviews         Review[]
  transactions    Transaction[]
  role            Role          @relation(fields: [roleId], references: [id]) // enum atau model
  // Users referred by this user
  referredUsers   Users[]       @relation("Referral")
  referredByUser  Users?        @relation("Referral", fields: [referred_by], references: [referral_code])

  // Relations for referrals
  referralsGiven    Referral[] @relation("ReferralsGiven")
  referralsReceived Referral[] @relation("ReferralsReceived")

  @@index([referred_by]) // aim to optimize search on referred_by
  @@map("users") // aim to match the database table name
}

model Transaction {
  id             String            @id @default(uuid())
  status         TransactionStatus
  payment_date   DateTime
  user_id        Int
  total_amount   Float
  payment_method String
  user           Users             @relation(fields: [user_id], references: [id])
}

model Role {
  id   Int     @id @default(autoincrement())
  name String
  user Users[]
}

model Referral {
  id                      Int            @id @default(autoincrement())
  referred_by             Int // User who gave referral
  referred_user           Int            @unique // New user who used referral (one per user)
  referral_code_used      String         @db.VarChar(30) // Specific code used
  status                  RefferalStatus @default(pending) // pending, completed, expired
  referrer_points_awarded Int            @default(10000) // Fixed 10,000 points
  referral_coupon_id      String? // Discount coupon given to new user
  created_at              DateTime       @default(now())
  completed_at            DateTime?

  // Relations
  referred_by_user Users   @relation("ReferralsGiven", fields: [referred_by], references: [id])
  referred_User    Users   @relation("ReferralsReceived", fields: [referred_user], references: [id])
  coupon           Coupon? @relation(fields: [referral_coupon_id], references: [id])

  @@index([referral_code_used])
  @@map("referral")
}
