generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Event {
  id          String        @id @default(uuid())
  name        String
  location    String
  start_date  DateTime
  end_date    DateTime
  seats       Int
  organizer   String
  price       Float
  description String
  created_at  DateTime      @default(now())
  category    String
  user_id     Int
  image_url   String?
  user        Users         @relation(fields: [user_id], references: [id])
  reviews     Review[]
  Transaction Transaction[]
  vouchers    Voucher[]
}

model Voucher {
  id            String   @id @default(uuid())
  discount      Float
  name          String
  event_id      String
  expiry_date   DateTime
  code          String   @unique
  max_usage     Int
  current_usage Int
  event         Event    @relation(fields: [event_id], references: [id])
}

model Review {
  id         String   @id @default(uuid())
  event_id   String
  message    String
  rating     Int
  created_at DateTime @default(now())
  user_id    Int
  event      Event    @relation(fields: [event_id], references: [id])
  user       Users    @relation(fields: [user_id], references: [id])

  @@unique([user_id, event_id])
}

model Coupon {
  name                String
  expiry_date         DateTime
  code                String     @unique
  max_usage           Int
  current_usage       Int        @default(0)
  description         String?
  is_used             Boolean    @default(false)
  user_id             Int
  discount_percentage Int
  id                  Int        @id @default(autoincrement())
  creatAt             DateTime   @default(now())
  user                Users      @relation(fields: [user_id], references: [id])
  Referral            Referral[]
}

model Users {
  first_name          String
  last_name           String
  profile_picture     String?
  password            String               @db.VarChar(255)
  email               String               @unique
  referral_code       String               @unique @db.VarChar(30)
  user_points         Int                  @default(0)
  roleId              Int                  @default(1)
  is_verified         Boolean              @default(false)
  expiry_points       DateTime
  id                  Int                  @id @default(autoincrement())
  referred_by         Int?
  discount_coupons    Coupon[]
  event               Event[]
  passwordResetTokens PasswordResetToken[]
  PointTransactions   PointTransactions[]
  reviews             Review[]
  Transactions        Transaction[]
  referralsGiven      Referral[]           @relation("ReferralsGiven")
  referralsReceived   Referral?            @relation("ReferralsReceived")
  referredUser        Users?               @relation("UserReferrals", fields: [referred_by], references: [id])
  referredUsers       Users[]              @relation("UserReferrals")
  role                Role                 @relation(fields: [roleId], references: [id])

  @@index([referred_by])
  @@map("users")
}

// schema.prisma
model Transaction {
  id             String            @id @default(uuid())
  total_amount   Float
  payment_method String?
  status         TransactionStatus @default(waiting_for_payment)
  user_id        Int
  event_id       String
  created_at     DateTime          @default(now())
  expired_at     DateTime?
  quantity       Int
  payment_date   DateTime?
  payment_proof  String? // Tambah ini untuk menyimpan URL bukti pembayaran
  point_used     Int?              @default(0)
  coupon_code    String?
  voucher_code   String?
  event          Event             @relation(fields: [event_id], references: [id])
  user           Users             @relation(fields: [user_id], references: [id])
}

model PointTransactions {
  id          Int      @id @default(autoincrement())
  userId      Int
  amount      Int
  type        String
  description String?
  CreatedAt   DateTime @default(now())
  expiry_date DateTime
  is_expired  Boolean  @default(false)
  user        Users    @relation(fields: [userId], references: [id])

  @@index([userId, is_expired])
  @@index([expiry_date])
}

model Role {
  id   Int     @id @default(autoincrement())
  name String
  user Users[]
}

model Referral {
  id                      Int            @id @default(autoincrement())
  referral_code_used      String         @db.VarChar(30)
  status                  RefferalStatus @default(pending)
  referrer_points_awarded Int            @default(10000)
  created_at              DateTime       @default(now())
  completed_at            DateTime?
  referred_by             Int
  referred_user           Int            @unique
  referral_coupon_id      Int
  coupon                  Coupon         @relation(fields: [referral_coupon_id], references: [id])
  referred_by_user        Users          @relation("ReferralsGiven", fields: [referred_by], references: [id])
  referred_User           Users          @relation("ReferralsReceived", fields: [referred_user], references: [id])

  @@index([referral_code_used])
  @@map("referral")
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      Users    @relation(fields: [userId], references: [id])
}

enum TransactionStatus {
  waiting_for_payment
  waiting_for_admin
  confirmation
  done
  rejected
  expired
  canceled
}

enum RefferalStatus {
  pending
  completed
  expired
}
